package tennistracker;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JMenuItem;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author joeykalbas
 */
public class TennisCourt extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form Court
     */
    HashMap<String, Edge> forehand = new HashMap<>();
    String[] columns = new String[] {"Player", "Forced Errors", "Unforced Errors", "First Serves", "Second Serves", "Aces", "Winners", "Opponent Forced Errors", "Opponent Unforced Errors"};
    String[] cols = new String[]{"Player", "Shot Selection", "Shot Result", "ShotX", "ResultX", "ShotY", "ResultY"};
    ArrayList<Point> pnts = new ArrayList<>();
    Object[][] points;
    int forcedErrors1 = 0;
    int winners = 0;
    int unforcedErrors = 0;
    int opFE = 0;
    int fserve = 0;
    int fservetot = 0;
    int sserve = 0;
    int sservetot = 0;
    int aces = 0;
    int opunf = 0;
    Object[][] data;
    int x;
    int y;
    int thisx;
    int thisy;
    
    
    ActionListener l = (ActionEvent event) -> {
        event.getActionCommand();
    };
    
    JMenuItem fe = new JMenuItem("Forced error");
    JMenuItem w = new JMenuItem("Winner");
    JMenuItem ofe = new JMenuItem("Opponent forced error");
    JMenuItem oue = new JMenuItem("Opponent unforced error");
    JMenuItem ace = new JMenuItem("Ace");
    JMenuItem ms = new JMenuItem("Made serve");
    JMenuItem sw = new JMenuItem("Service winner");
    JMenuItem rue = new JMenuItem("Return unforced error");
    JMenuItem fh = new JMenuItem("Forehand");
    JMenuItem bh = new JMenuItem("Backhand");
    JMenuItem serve1 = new JMenuItem("First serve");
    JMenuItem serve2 = new JMenuItem("Second serve");
    JMenuItem fhv = new JMenuItem("Forehand volley");
    JMenuItem bhv = new JMenuItem("Backhand volley");
    JMenuItem ov = new JMenuItem("Overhead");
    JMenuItem ufe = new JMenuItem("Unforced error");
    JMenuItem missserve = new JMenuItem("Missed serve");
    String FC = "Fiona Crawley"; String SD = "Sara Daavetilla";
    String AY = "Anika Yarlagadda"; String AG = "Alexa Graham";
    String AH = "Anna Harmon"; String KH = "Kacie Harvey";
    String MJ = "Makenna Jones"; String SM = "Sara McClure";
    String CM = "Cameron Morra"; String SP = "Sophia Patel";
    String AS = "Alle Sanford"; String ES = "Elizabeth Scotty";
    String RT = "Reilly Tran";
    String singles = "Singles";
    String doubles = "Doubles"; 
    String shotsource = "";
    
    public TennisCourt() {
        this.data = new Object[][] {
            {"Player1", forcedErrors1, unforcedErrors, fserve, sserve, aces, winners, opFE, opunf},
            {"Player2", 0, 0, 0, 0, 0, 0, 0, 0}
        };
        initComponents();
        stats.setModel(tm);
        rightAlley.setSize(36, 592);
        matchType.removeAllItems();
        matchType.addItem("Please Choose");
        matchType.addItem(singles);
        matchType.addItem(doubles);
 
        topNoMans.setBackground(Color.GREEN);
        bottomRightService.setBackground(Color.blue);
        topRightService.setBackground(Color.yellow);
        topLeftService.setBackground(Color.CYAN);
        rightAlley.setBackground(Color.pink);
        leftAlley.setBackground(Color.pink);
        bottomRightService.setBackground(Color.blue);
        bottomNoMans.setBackground(Color.orange);
        bottomLeftService.setBackground(Color.MAGENTA);
        topOB1.setBackground(Color.red);
        bottomOB1.setBackground(Color.red);
        rightOB.setBackground(Color.red);
        leftOB1.setBackground(Color.red);
        
        
        pointTracker.setModel(pointsModel);
        pointsModel.setColumnIdentifiers(cols);
    }
    
    DefaultTableModel pointsModel = new DefaultTableModel();


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        leftOB = new javax.swing.JPanel();
        topOB = new javax.swing.JPanel();
        bottomOB = new javax.swing.JPanel();
        jFrame2 = new javax.swing.JFrame();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        matchType = new javax.swing.JComboBox<>();
        UNCPlayer1 = new javax.swing.JTextField();
        UNCPlayer2 = new javax.swing.JTextField();
        Opponent1 = new javax.swing.JTextField("Opponent 1");
        Opponent2 = new javax.swing.JTextField("Opponent 2");
        playerTracker = new javax.swing.JComboBox<>();
        leftOB1 = new javax.swing.JPanel();
        topNoMans = new javax.swing.JPanel();
        bottomRightService = new javax.swing.JPanel();
        topRightService = new javax.swing.JPanel();
        rightAlley = new javax.swing.JPanel();
        topLeftService = new javax.swing.JPanel();
        bottomLeftService = new javax.swing.JPanel();
        rightOB = new javax.swing.JPanel();
        leftAlley = new javax.swing.JPanel();
        bottomNoMans = new javax.swing.JPanel();
        topOB1 = new javax.swing.JPanel();
        bottomOB1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        stats = new javax.swing.JTable();
        saveData = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        pointTracker = new javax.swing.JTable();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout leftOBLayout = new javax.swing.GroupLayout(leftOB);
        leftOB.setLayout(leftOBLayout);
        leftOBLayout.setHorizontalGroup(
            leftOBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        leftOBLayout.setVerticalGroup(
            leftOBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 686, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout topOBLayout = new javax.swing.GroupLayout(topOB);
        topOB.setLayout(topOBLayout);
        topOBLayout.setHorizontalGroup(
            topOBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 222, Short.MAX_VALUE)
        );
        topOBLayout.setVerticalGroup(
            topOBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout bottomOBLayout = new javax.swing.GroupLayout(bottomOB);
        bottomOB.setLayout(bottomOBLayout);
        bottomOBLayout.setHorizontalGroup(
            bottomOBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );
        bottomOBLayout.setVerticalGroup(
            bottomOBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        matchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        matchType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                matchTypeMouseClicked(evt);
            }
        });
                
        javax.swing.GroupLayout leftOB1Layout = new javax.swing.GroupLayout(leftOB1);
        leftOB1.setLayout(leftOB1Layout);
        leftOB1Layout.setHorizontalGroup(
            leftOB1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        leftOB1Layout.setVerticalGroup(
            leftOB1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 881, Short.MAX_VALUE)
        );

        leftOB1.setSize(36, 576);

        topNoMans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                topNoMansMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                topNoMansMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout topNoMansLayout = new javax.swing.GroupLayout(topNoMans);
        topNoMans.setLayout(topNoMansLayout);
        topNoMansLayout.setHorizontalGroup(
            topNoMansLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 222, Short.MAX_VALUE)
        );
        topNoMansLayout.setVerticalGroup(
            topNoMansLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 144, Short.MAX_VALUE)
        );

        bottomRightService.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bottomRightServiceMouseClicked(evt);
            }
        });
        
        topOB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                topNoMansMouseClicked(evt);
            }
        });
        
        bottomOB1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bottomOB1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout bottomRightServiceLayout = new javax.swing.GroupLayout(bottomRightService);
        bottomRightService.setLayout(bottomRightServiceLayout);
        bottomRightServiceLayout.setHorizontalGroup(
            bottomRightServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 108, Short.MAX_VALUE)
        );
        bottomRightServiceLayout.setVerticalGroup(
            bottomRightServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 142, Short.MAX_VALUE)
        );

        topRightService.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                topRightServiceMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout topRightServiceLayout = new javax.swing.GroupLayout(topRightService);
        topRightService.setLayout(topRightServiceLayout);
        topRightServiceLayout.setHorizontalGroup(
            topRightServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 108, Short.MAX_VALUE)
        );
        topRightServiceLayout.setVerticalGroup(
            topRightServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 144, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout rightAlleyLayout = new javax.swing.GroupLayout(rightAlley);
        rightAlley.setLayout(rightAlleyLayout);
        rightAlleyLayout.setHorizontalGroup(
            rightAlleyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );
        rightAlleyLayout.setVerticalGroup(
            rightAlleyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 592, Short.MAX_VALUE)
        );

        leftOB1.setSize(36, 576);

        topLeftService.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                topLeftServiceMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout topLeftServiceLayout = new javax.swing.GroupLayout(topLeftService);
        topLeftService.setLayout(topLeftServiceLayout);
        topLeftServiceLayout.setHorizontalGroup(
            topLeftServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 108, Short.MAX_VALUE)
        );
        topLeftServiceLayout.setVerticalGroup(
            topLeftServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 144, Short.MAX_VALUE)
        );

        bottomLeftService.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bottomLeftServiceMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout bottomLeftServiceLayout = new javax.swing.GroupLayout(bottomLeftService);
        bottomLeftService.setLayout(bottomLeftServiceLayout);
        bottomLeftServiceLayout.setHorizontalGroup(
            bottomLeftServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 108, Short.MAX_VALUE)
        );
        bottomLeftServiceLayout.setVerticalGroup(
            bottomLeftServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 142, Short.MAX_VALUE)
        );

        rightOB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rightOBMouseClicked(evt);
            }
        });
        
        topOB1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                topOB1MouseClicked(evt);
            }   
        });
        leftOB1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leftOB1MouseClicked(evt);
            }   
        });
        
        leftAlley.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leftAlleyMouseClicked(evt);
            }   
        });
        rightAlley.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rightAlleyMouseClicked(evt);
            }   
        });

        javax.swing.GroupLayout rightOBLayout = new javax.swing.GroupLayout(rightOB);
        rightOB.setLayout(rightOBLayout);
        rightOBLayout.setHorizontalGroup(
            rightOBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 106, Short.MAX_VALUE)
        );
        rightOBLayout.setVerticalGroup(
            rightOBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 881, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout leftAlleyLayout = new javax.swing.GroupLayout(leftAlley);
        leftAlley.setLayout(leftAlleyLayout);
        leftAlleyLayout.setHorizontalGroup(
            leftAlleyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );
        leftAlleyLayout.setVerticalGroup(
            leftAlleyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 592, Short.MAX_VALUE)
        );

        leftOB1.setSize(36, 576);

        bottomNoMans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bottomNoMansMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout bottomNoMansLayout = new javax.swing.GroupLayout(bottomNoMans);
        bottomNoMans.setLayout(bottomNoMansLayout);
        bottomNoMansLayout.setHorizontalGroup(
            bottomNoMansLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 222, Short.MAX_VALUE)
        );
        bottomNoMansLayout.setVerticalGroup(
            bottomNoMansLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 144, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout topOB1Layout = new javax.swing.GroupLayout(topOB1);
        topOB1.setLayout(topOB1Layout);
        topOB1Layout.setHorizontalGroup(
            topOB1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 306, Short.MAX_VALUE)
        );
        topOB1Layout.setVerticalGroup(
            topOB1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout bottomOB1Layout = new javax.swing.GroupLayout(bottomOB1);
        bottomOB1.setLayout(bottomOB1Layout);
        bottomOB1Layout.setHorizontalGroup(
            bottomOB1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 306, Short.MAX_VALUE)
        );
        bottomOB1Layout.setVerticalGroup(
            bottomOB1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(stats);

        saveData.setText("Save Data");
        saveData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveDataMouseClicked(evt);
            }
        });
        saveData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDataActionPerformed(evt);
            }
        });

        pointTracker.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(pointTracker);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(matchType, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(UNCPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(UNCPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(Opponent1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(Opponent2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(leftOB1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(topOB1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(leftAlley, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(topNoMans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(topLeftService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(topRightService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bottomLeftService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(bottomRightService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(bottomNoMans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addComponent(rightAlley, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bottomOB1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(rightOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(saveData))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(matchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UNCPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UNCPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Opponent1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Opponent2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(leftOB1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(topOB1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(leftAlley, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(topNoMans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(topLeftService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(topRightService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bottomLeftService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bottomRightService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addComponent(bottomNoMans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(rightAlley, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addComponent(bottomOB1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(rightOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(saveData))))
        );

        pack();
    }// </editor-fold>                        

    private void topNoMansMouseClicked(java.awt.event.MouseEvent evt) {                                       
        java.awt.Point pp = evt.getPoint();
        SwingUtilities.convertPointToScreen(pp, evt.getComponent());
        thisx = pp.x;
        thisy = pp.y;
        
        javax.swing.JPopupMenu typeOfShot = new javax.swing.JPopupMenu();
        typeOfShot.add(fe);
        typeOfShot.add(w);
        typeOfShot.add(ofe);
        typeOfShot.add(missserve);
        typeOfShot.show(evt.getComponent(), typeOfShot.getX(), typeOfShot.getY());
        PopupMenuListener p = new PopupMenuListener() {
            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                
            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {
                
            }
        };
        
        typeOfShot.addPopupMenuListener(p);
        fe.addActionListener((ActionEvent e) -> {
                forcedErrors1++;
                stats.setValueAt(forcedErrors1, 0, 1);
                Vertex v = new Vertex(evt.getX(), evt.getY());
                forehand.put("Forced error", new Edge(new Vertex(x,y), v));
                Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Forced error", x, thisx, y, thisy);
                Object[] obj = {UNCPlayer1.getText(), shotsource,"Forced error", x, thisx, y, thisy};
                pointsModel.addRow(obj);
        }); 
        
        w.addActionListener((ActionEvent e) -> {
                winners++;
                stats.setValueAt(winners, 0, 6);
                Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                forehand.put("Forced error", new Edge(new Vertex(x,y), v));
                Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Winner", x, thisx, y, thisy);
                pnts.add(pnt);
                Object[] obj = {UNCPlayer1.getText(), shotsource,"Winner", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                pointsModel.addRow(obj);
        });  
        missserve.addActionListener((ActionEvent e) -> {
            if(shotsource.equals("First Serve"))
                {
                    fserve++;
                    fservetot++;
                    stats.setValueAt(fserve + "/" + fservetot, 0, 3);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Missed 1 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Missed 1 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                } else {
                    sserve++;
                    sservetot++;
                    stats.setValueAt(sserve + "/" + sservetot, 0, 4);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Missed 2 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Missed 2 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                }
        });
    } 
    
    private void leftAlleyMouseClicked(java.awt.event.MouseEvent evt)
    {
        java.awt.Point pp = evt.getPoint();
        SwingUtilities.convertPointToScreen(pp, evt.getComponent());
        thisx = pp.x;
        thisy = pp.y;
        
        javax.swing.JPopupMenu typeOfShot = new javax.swing.JPopupMenu();
        typeOfShot.add(ufe);
        typeOfShot.add(ofe);
        typeOfShot.add(serve1);
        typeOfShot.add(serve2);
        typeOfShot.show(evt.getComponent(), typeOfShot.getX(), typeOfShot.getY());
        PopupMenuListener p = new PopupMenuListener() {
            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                
            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {
                
            }
        };
        
        typeOfShot.addPopupMenuListener(p);
        ufe.addActionListener((ActionEvent e) -> {
                unforcedErrors++;
                stats.setValueAt(unforcedErrors, 0, 2);
                Vertex v = new Vertex(evt.getX(), evt.getY());
                forehand.put("Unforced error", new Edge(new Vertex(x,y), v));
                Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Unforced error", x, thisx, y, thisy);
                Object[] obj = {UNCPlayer1.getText(), shotsource,"Unforced error", x, thisx, y, thisy};
                pointsModel.addRow(obj);
        }); 
        
        ofe.addActionListener((ActionEvent e) -> {
                opFE++;
                stats.setValueAt(opFE, 0, 7);
                Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                forehand.put("Opponent forced error", new Edge(new Vertex(x,y), v));
                Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Opponent forced error", x, thisx, y, thisy);
                pnts.add(pnt);
                Object[] obj = {UNCPlayer1.getText(), shotsource,"Opponent forced error", x, thisx, y, thisy};
                pointsModel.addRow(obj);
        }); 
        serve1.addActionListener((ActionEvent e) -> {
            fservetot++;
            stats.setValueAt(fserve + "/" + fservetot, 0, 3);
            Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Missed 1 Serve", x, thisx, y, thisy);
            pnts.add(pnt);
            Object[] obj = {UNCPlayer1.getText(), shotsource,"Missed 1 Serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
            pointsModel.addRow(obj);
        });
        serve2.addActionListener((ActionEvent e) -> {
            sservetot++;
            unforcedErrors++;
            stats.setValueAt(sserve + "/" + sservetot, 0, 4);
            stats.setValueAt(unforcedErrors, 0, 2);
            Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Missed 2 Serve", x, thisx, y, thisy);
            pnts.add(pnt);
            Object[] obj = {UNCPlayer1.getText(), shotsource,"Missed 2 Serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
            pointsModel.addRow(obj);
        });
    }
    
    private void rightAlleyMouseClicked(java.awt.event.MouseEvent evt)
    {
        java.awt.Point pp = evt.getPoint();
        SwingUtilities.convertPointToScreen(pp, evt.getComponent());
        thisx = pp.x;
        thisy = pp.y;
        
        javax.swing.JPopupMenu typeOfShot = new javax.swing.JPopupMenu();
        typeOfShot.add(ufe);
        typeOfShot.add(ofe);
        typeOfShot.add(serve1);
        typeOfShot.add(serve2);
        typeOfShot.show(evt.getComponent(), typeOfShot.getX(), typeOfShot.getY());
        PopupMenuListener p = new PopupMenuListener() {
            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                
            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {
                
            }
        };
        
        typeOfShot.addPopupMenuListener(p);
        ufe.addActionListener((ActionEvent e) -> {
                unforcedErrors++;
                stats.setValueAt(unforcedErrors, 0, 2);
                Vertex v = new Vertex(evt.getX(), evt.getY());
                forehand.put("Unforced error", new Edge(new Vertex(x,y), v));
                Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Unforced error", x, thisx, y, thisy);
                Object[] obj = {UNCPlayer1.getText(), shotsource,"Unforced error", x, thisx, y, thisy};
                pointsModel.addRow(obj);
        }); 
        
        ofe.addActionListener((ActionEvent e) -> {
                opFE++;
                stats.setValueAt(opFE, 0, 7);
                Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                forehand.put("Opponent forced error", new Edge(new Vertex(x,y), v));
                Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Opponent forced error", x, thisx, y, thisy);
                pnts.add(pnt);
                Object[] obj = {UNCPlayer1.getText(), shotsource,"Opponent forced error", x, thisx, y, thisy};
                pointsModel.addRow(obj);
        }); 
        serve1.addActionListener((ActionEvent e) -> {
            fservetot++;
            stats.setValueAt(fserve + "/" + fservetot, 0, 3);
            Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Missed 1 Serve", x, thisx, y, thisy);
            pnts.add(pnt);
            Object[] obj = {UNCPlayer1.getText(), shotsource,"Missed 1 Serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
            pointsModel.addRow(obj);
        });
        serve2.addActionListener((ActionEvent e) -> {
            sservetot++;
            unforcedErrors++;
            stats.setValueAt(sserve + "/" + sservetot, 0, 4);
            stats.setValueAt(unforcedErrors, 0, 2);
            Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Missed 2 Serve", x, thisx, y, thisy);
            pnts.add(pnt);
            Object[] obj = {UNCPlayer1.getText(), shotsource,"Missed 2 Serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
            pointsModel.addRow(obj);
        });
    }

    private void topLeftServiceMouseClicked(java.awt.event.MouseEvent evt) {                                            
        java.awt.Point pp = evt.getPoint();
        SwingUtilities.convertPointToScreen(pp, evt.getComponent());
        thisx = pp.x;
        thisy = pp.y;
        
        javax.swing.JPopupMenu typeOfShot = new javax.swing.JPopupMenu();
        typeOfShot.add(fe);
        typeOfShot.add(oue);
        typeOfShot.add(w);
        typeOfShot.add(ace);
        typeOfShot.add(ms);
        typeOfShot.add(sw);
        typeOfShot.add(rue);
        typeOfShot.show(evt.getComponent(), typeOfShot.getX(), typeOfShot.getY());
        
        PopupMenuListener p = new PopupMenuListener() {
            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                
            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {
                
            }
        };
        
        typeOfShot.addPopupMenuListener(p);
        fe.addActionListener((ActionEvent e) -> {
                forcedErrors1++;
                stats.setValueAt(forcedErrors1, 0, 1);
                Vertex v = new Vertex(evt.getX(), evt.getY());
                Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Forced error", x, thisx, y, thisy);
                Object[] obj = {UNCPlayer1.getText(), shotsource,"Forced error", x, thisx, y, thisy};
                pointsModel.addRow(obj);
        }); 
        w.addActionListener((ActionEvent e) -> {
                winners++;
                stats.setValueAt(winners, 0, 6);
                Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Winner", x, thisx, y, thisy);
                pnts.add(pnt);
                Object[] obj = {UNCPlayer1.getText(), shotsource,"Winner", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                pointsModel.addRow(obj);
        }); 
        ms.addActionListener((ActionEvent e) -> {
                if(shotsource.equals("First Serve"))
                {
                    fserve++;
                    fservetot++;
                    stats.setValueAt(fserve + "/" + fservetot, 0, 3);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Made 1 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Made 1 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                } else {
                    sserve++;
                    sservetot++;
                    stats.setValueAt(sserve + "/" + sservetot, 0, 4);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Made 2 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Made 2 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                }
        }); 
        ace.addActionListener((ActionEvent e) -> {
                if(shotsource.equals("First Serve"))
                {
                    aces++;
                    fserve++;
                    fservetot++;
                    forcedErrors1++;
                    stats.setValueAt(fserve + "/" + fservetot, 0, 3);
                    stats.setValueAt(forcedErrors1, 0, 1);
                    stats.setValueAt(aces, 0, 5);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Made 1 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Made 1 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                } else {
                    aces++;
                    sserve++;
                    sservetot++;
                    stats.setValueAt(sserve + "/" + sservetot, 0, 4);
                    stats.setValueAt(forcedErrors1, 0, 1);
                    stats.setValueAt(aces, 0, 5);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Made 2 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Made 2 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                }
        });
        sw.addActionListener((ActionEvent e) -> {
                if(shotsource.equals("First Serve"))
                {
                    fserve++;
                    fservetot++;
                    forcedErrors1++;
                    stats.setValueAt(fserve + "/" + fservetot, 0, 3);
                    stats.setValueAt(forcedErrors1, 0, 1);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Made 1 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Made 1 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                } else {
                    aces++;
                    sserve++;
                    sservetot++;
                    stats.setValueAt(sserve + "/" + sservetot, 0, 4);
                    stats.setValueAt(forcedErrors1, 0, 1);
                    stats.setValueAt(aces, 0, 5);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Made 2 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Made 2 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                }
        });
        rue.addActionListener((ActionEvent e) -> {
                if(shotsource.equals("First Serve"))
                {
                    fserve++;
                    fservetot++;
                    opunf++;
                    stats.setValueAt(fserve + "/" + fservetot, 0, 3);
                    stats.setValueAt(opunf, 0, 8);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Made 1 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Made 1 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                } else {
                    aces++;
                    sserve++;
                    sservetot++;
                    stats.setValueAt(sserve + "/" + sservetot, 0, 4);
                    stats.setValueAt(forcedErrors1, 0, 1);
                    stats.setValueAt(opunf, 0, 8);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Made 2 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Made 2 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                }
        });
    }                       

    private void topRightServiceMouseClicked(java.awt.event.MouseEvent evt) {                                             
        java.awt.Point pp = evt.getPoint();
        SwingUtilities.convertPointToScreen(pp, evt.getComponent());
        thisx = pp.x;
        thisy = pp.y;
        
        javax.swing.JPopupMenu typeOfShot = new javax.swing.JPopupMenu();
        typeOfShot.add(fe);
        typeOfShot.add(oue);
        typeOfShot.add(w);
        typeOfShot.add(ace);
        typeOfShot.add(ms);
        typeOfShot.add(sw);
        typeOfShot.add(rue);
        typeOfShot.show(evt.getComponent(), typeOfShot.getX(), typeOfShot.getY());
        
        PopupMenuListener p = new PopupMenuListener() {
            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                
            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {
                
            }
        };
        
        typeOfShot.addPopupMenuListener(p);
        fe.addActionListener((ActionEvent e) -> {
                forcedErrors1++;
                stats.setValueAt(forcedErrors1, 0, 1);
                Vertex v = new Vertex(evt.getX(), evt.getY());
                Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Forced error", x, thisx, y, thisy);
                Object[] obj = {UNCPlayer1.getText(), shotsource,"Forced error", x, thisx, y, thisy};
                pointsModel.addRow(obj);
        }); 
        w.addActionListener((ActionEvent e) -> {
                winners++;
                stats.setValueAt(winners, 0, 6);
                Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Winner", x, thisx, y, thisy);
                pnts.add(pnt);
                Object[] obj = {UNCPlayer1.getText(), shotsource,"Winner", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                pointsModel.addRow(obj);
        }); 
        ms.addActionListener((ActionEvent e) -> {
                if(shotsource.equals("First Serve"))
                {
                    fserve++;
                    fservetot++;
                    stats.setValueAt(fserve + "/" + fservetot, 0, 3);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Made 1 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Made 1 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                } else {
                    sserve++;
                    sservetot++;
                    stats.setValueAt(sserve + "/" + sservetot, 0, 4);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Made 2 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Made 2 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                }
        }); 
        ace.addActionListener((ActionEvent e) -> {
                if(shotsource.equals("First Serve"))
                {
                    aces++;
                    fserve++;
                    fservetot++;
                    forcedErrors1++;
                    stats.setValueAt(fserve + "/" + fservetot, 0, 3);
                    stats.setValueAt(forcedErrors1, 0, 1);
                    stats.setValueAt(aces, 0, 5);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Made 1 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Made 1 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                } else {
                    aces++;
                    sserve++;
                    sservetot++;
                    stats.setValueAt(sserve + "/" + sservetot, 0, 4);
                    stats.setValueAt(forcedErrors1, 0, 1);
                    stats.setValueAt(aces, 0, 5);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Made 2 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Made 2 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                }
        });
        sw.addActionListener((ActionEvent e) -> {
                if(shotsource.equals("First Serve"))
                {
                    fserve++;
                    fservetot++;
                    forcedErrors1++;
                    stats.setValueAt(fserve + "/" + fservetot, 0, 3);
                    stats.setValueAt(forcedErrors1, 0, 1);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Made 1 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Made 1 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                } else {
                    aces++;
                    sserve++;
                    sservetot++;
                    stats.setValueAt(sserve + "/" + sservetot, 0, 4);
                    stats.setValueAt(forcedErrors1, 0, 1);
                    stats.setValueAt(aces, 0, 5);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Made 2 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Made 2 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                }
        });
        rue.addActionListener((ActionEvent e) -> {
                if(shotsource.equals("First Serve"))
                {
                    fserve++;
                    fservetot++;
                    opunf++;
                    stats.setValueAt(fserve + "/" + fservetot, 0, 3);
                    stats.setValueAt(opunf, 0, 8);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Made 1 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Made 1 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                } else {
                    aces++;
                    sserve++;
                    sservetot++;
                    stats.setValueAt(sserve + "/" + sservetot, 0, 4);
                    stats.setValueAt(forcedErrors1, 0, 1);
                    stats.setValueAt(opunf, 0, 8);
                    Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                    Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Made 2 serve", x, thisx, y, thisy);
                    pnts.add(pnt);
                    Object[] obj = {UNCPlayer1.getText(), shotsource,"Made 2 serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
                    pointsModel.addRow(obj);
                }
        });
        
    }                                            

    TableModel tm = new TableModel() {
                
                @Override
                public int getRowCount() {
                    return data.length;
                }

                @Override
                public int getColumnCount() {
                    return columns.length;
                }

                @Override
                public String getColumnName(int columnIndex) {
                    return columns[columnIndex];
                }

                @Override
                public Class<?> getColumnClass(int columnIndex) {
                    if(columnIndex == 0)
                    {
                        return String.class;
                    } else {
                        return int.class;
                    }
                }

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return true;
                }

                @Override
                public Object getValueAt(int rowIndex, int columnIndex) {
                    return data[rowIndex][columnIndex];
                }

                @Override
                public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
                    data[rowIndex][columnIndex] = aValue;
                }

                @Override
                public void addTableModelListener(TableModelListener l) {
                    TableModelEvent e = new TableModelEvent(this);
                }

                @Override
                public void removeTableModelListener(TableModelListener l) {
                    
                }
            };
    private void matchTypeMouseClicked(java.awt.event.MouseEvent evt) {                                       
        matchType.addActionListener((ActionEvent e) -> {
            
            stats.setModel(tm);
            if(matchType.getSelectedItem().equals("Singles"))
            {
                Opponent2.setVisible(false);
                UNCPlayer2.setVisible(false);
            }
            if(matchType.getSelectedItem().equals("Doubles"))
            {
                Opponent2.setVisible(true);
                UNCPlayer2.setVisible(true);
            }
        });
    }                                      

    private void UNCPlayer1MouseClicked(java.awt.event.MouseEvent evt) {                                        
        UNCPlayer1.addActionListener((ActionEvent e) -> {
            e.getActionCommand();
            stats.setValueAt(UNCPlayer1.getText(), 0, 0);
            TableModel tm = stats.getModel();
            tm.addTableModelListener(stats);
            tm.setValueAt(UNCPlayer1.getText(), 0, 0);
            stats.setModel(tm);
        });
            
    }   
    
    private void UNCPlayer2MouseClicked(java.awt.event.MouseEvent evt)
    {
        UNCPlayer2.addActionListener((ActionEvent e) -> {
            e.getActionCommand();
            stats.setValueAt(UNCPlayer2.getText(), 1, 0);
            TableModel tm = stats.getModel();
            tm.addTableModelListener(stats);
            tm.setValueAt(UNCPlayer2.getText(), 1, 0);
            stats.setModel(tm);
        });
    }

    private void bottomLeftServiceMouseClicked(java.awt.event.MouseEvent evt) {                                               
        java.awt.Point pp = evt.getPoint();
        javax.swing.JPopupMenu shotSource = new javax.swing.JPopupMenu();
        shotSource.add(fh);
        shotSource.add(bh);
        shotSource.add(serve1);
        shotSource.add(serve2);
        shotSource.add(fhv);
        shotSource.add(bhv);
        shotSource.add(ov);
        shotSource.show(evt.getComponent(), shotSource.getX(), shotSource.getY());
        SwingUtilities.convertPointToScreen(pp, evt.getComponent());
        serve1.addActionListener((ActionEvent e) -> {
            thisx = pp.x;
            thisy = pp.y;
            fservetot++;
            stats.setValueAt(fserve + "/" + fservetot, 0, 3);
            Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Missed 1 Serve", x, thisx, y, thisy);
            pnts.add(pnt);
            Object[] obj = {UNCPlayer1.getText(), shotsource,"Missed 1 Serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
            pointsModel.addRow(obj);
        });
        serve2.addActionListener((ActionEvent e) -> {
            thisx = pp.x;
            thisy = pp.y;
            sservetot++;
            unforcedErrors++;
            stats.setValueAt(sserve + "/" + sservetot, 0, 4);
            stats.setValueAt(unforcedErrors, 0, 2);
            Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Missed 2 Serve", x, thisx, y, thisy);
            pnts.add(pnt);
            Object[] obj = {UNCPlayer1.getText(), shotsource,"Missed 2 Serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
            pointsModel.addRow(obj);
        });
        x = pp.x;
        y = pp.y;
        fh.addActionListener((ActionEvent e) -> {
            shotsource = "Forehand";
        });
        bh.addActionListener((ActionEvent e) -> {
            shotsource = "Backhand";
        });
        
        fhv.addActionListener((ActionEvent e) -> {
            shotsource = "Forehand volley";
        });
        bhv.addActionListener((ActionEvent e) -> {
            shotsource = "Backhand volley";
        });
        ov.addActionListener((ActionEvent e) -> {
            shotsource = "Overhead";
        });
        
    }                                              

    private void bottomRightServiceMouseClicked(java.awt.event.MouseEvent evt) {                                                
        java.awt.Point pp = evt.getPoint();
        javax.swing.JPopupMenu shotSource = new javax.swing.JPopupMenu();
        shotSource.add(fh);
        shotSource.add(bh);
        shotSource.add(serve1);
        shotSource.add(serve2);
        shotSource.add(fhv);
        shotSource.add(bhv);
        shotSource.add(ov);
        shotSource.show(evt.getComponent(), shotSource.getX(), shotSource.getY());
        SwingUtilities.convertPointToScreen(pp, evt.getComponent());
        serve1.addActionListener((ActionEvent e) -> {
            thisx = pp.x;
            thisy = pp.y;
            fservetot++;
            stats.setValueAt(fserve + "/" + fservetot, 0, 3);
            Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Missed 1 Serve", x, thisx, y, thisy);
            pnts.add(pnt);
            Object[] obj = {UNCPlayer1.getText(), shotsource,"Missed 1 Serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
            pointsModel.addRow(obj);
        });
        serve2.addActionListener((ActionEvent e) -> {
            thisx = pp.x;
            thisy = pp.y;
            sservetot++;
            unforcedErrors++;
            stats.setValueAt(sserve + "/" + sservetot, 0, 4);
            stats.setValueAt(unforcedErrors, 0, 2);
            Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Missed 2 Serve", x, thisx, y, thisy);
            pnts.add(pnt);
            Object[] obj = {UNCPlayer1.getText(), shotsource,"Missed 2 Serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
            pointsModel.addRow(obj);
        });
        x = pp.x;
        y = pp.y;
        fh.addActionListener((ActionEvent e) -> {
            shotsource = "Forehand";
        });
        bh.addActionListener((ActionEvent e) -> {
            shotsource = "Backhand";
        });
        
        fhv.addActionListener((ActionEvent e) -> {
            shotsource = "Forehand volley";
        });
        bhv.addActionListener((ActionEvent e) -> {
            shotsource = "Backhand volley";
        });
        ov.addActionListener((ActionEvent e) -> {
            shotsource = "Overhead";
        });
    }                                               

    private void bottomOB1MouseClicked(java.awt.event.MouseEvent evt)
    {
        java.awt.Point pp = evt.getPoint();
        SwingUtilities.convertPointToScreen(pp, evt.getComponent());
        x = pp.x;
        y = pp.y;
        
        javax.swing.JPopupMenu shotSource = new javax.swing.JPopupMenu();
        shotSource.add(fh);
        shotSource.add(bh);
        shotSource.add(serve1);
        shotSource.add(serve2);
        shotSource.add(fhv);
        shotSource.add(bhv);
        shotSource.add(ov);
        shotSource.show(evt.getComponent(), shotSource.getX(), shotSource.getY());
        fh.addActionListener((ActionEvent e) -> {
            shotsource = "Forehand";
        });
        bh.addActionListener((ActionEvent e) -> {
            shotsource = "Backhand";
        });
        serve1.addActionListener((ActionEvent e) -> {
            shotsource = "First Serve";
        });
        serve2.addActionListener((ActionEvent e) -> {
            shotsource = "Second Serve";
        });
        fhv.addActionListener((ActionEvent e) -> {
            shotsource = "Forehand volley";
        });
        bhv.addActionListener((ActionEvent e) -> {
            shotsource = "Backhand volley";
        });
        ov.addActionListener((ActionEvent e) -> {
            shotsource = "Overhead";
        });
    }
    private void bottomNoMansMouseClicked(java.awt.event.MouseEvent evt) {                                          
        java.awt.Point pp = evt.getPoint();
        SwingUtilities.convertPointToScreen(pp, evt.getComponent());
        x = pp.x;
        y = pp.y;
        
        javax.swing.JPopupMenu shotSource = new javax.swing.JPopupMenu();
        shotSource.add(fh);
        shotSource.add(bh);
        shotSource.add(serve1);
        shotSource.add(serve2);
        shotSource.add(fhv);
        shotSource.add(bhv);
        shotSource.add(ov);
        shotSource.show(evt.getComponent(), shotSource.getX(), shotSource.getY());
        fh.addActionListener((ActionEvent e) -> {
            shotsource = "Forehand";
        });
        bh.addActionListener((ActionEvent e) -> {
            shotsource = "Backhand";
        });
        serve1.addActionListener((ActionEvent e) -> {
            shotsource = "First Serve";
        });
        serve2.addActionListener((ActionEvent e) -> {
            shotsource = "Second Serve";
        });
        fhv.addActionListener((ActionEvent e) -> {
            shotsource = "Forehand volley";
        });
        bhv.addActionListener((ActionEvent e) -> {
            shotsource = "Backhand volley";
        });
        ov.addActionListener((ActionEvent e) -> {
            shotsource = "Overhead";
        });
    }                                         
    
    private void saveDataMouseClicked(java.awt.event.MouseEvent evt) {     
        System.out.println(Opponent1.getText());
        String filePath = "/Users/joeykalbas/Desktop/TennisTracker/matches/match_data.txt";
        File file = new File(filePath);
        try {
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            
            for(int i=0;  i<pointTracker.getRowCount(); i++)
            {
                for(int j=0; j<pointTracker.getColumnCount(); j++)
                {
                    bw.write(pointTracker.getValueAt(i, j).toString() + ", ");
                }
                bw.newLine();
            }
            
            bw.close();
            fw.close();
        } catch (IOException ex) {
            Logger.getLogger(TennisCourt.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                     
    public void saveDataActionPerformed(java.awt.event.ActionEvent evt) 
    {
    }
    private void topNoMansMousePressed(java.awt.event.MouseEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    private void formWindowClosed(java.awt.event.WindowEvent evt) {                                  
        // TODO add your handling code here:
    }   
    
    private void leftOB1MouseClicked(java.awt.event.MouseEvent evt)
    {
        java.awt.Point pp = evt.getPoint();
        SwingUtilities.convertPointToScreen(pp, evt.getComponent());
        thisx = pp.x;
        thisy = pp.y;
        
        javax.swing.JPopupMenu typeOfShot = new javax.swing.JPopupMenu();
        typeOfShot.add(ufe);
        typeOfShot.add(ofe);
        typeOfShot.add(serve1);
        typeOfShot.add(serve2);
        typeOfShot.show(evt.getComponent(), typeOfShot.getX(), typeOfShot.getY());
        PopupMenuListener p = new PopupMenuListener() {
            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                
            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {
                
            }
        };
        
        typeOfShot.addPopupMenuListener(p);
        ufe.addActionListener((ActionEvent e) -> {
                unforcedErrors++;
                stats.setValueAt(unforcedErrors, 0, 2);
                Vertex v = new Vertex(evt.getX(), evt.getY());
                forehand.put("Unforced error", new Edge(new Vertex(x,y), v));
                Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Unforced error", x, thisx, y, thisy);
                Object[] obj = {UNCPlayer1.getText(), shotsource,"Unforced error", x, thisx, y, thisy};
                pointsModel.addRow(obj);
        }); 
        
        ofe.addActionListener((ActionEvent e) -> {
                opFE++;
                stats.setValueAt(opFE, 0, 7);
                Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                forehand.put("Opponent forced error", new Edge(new Vertex(x,y), v));
                Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Opponent forced error", x, thisx, y, thisy);
                pnts.add(pnt);
                Object[] obj = {UNCPlayer1.getText(), shotsource,"Opponent forced error", x, thisx, y, thisy};
                pointsModel.addRow(obj);
        }); 
        serve1.addActionListener((ActionEvent e) -> {
            fservetot++;
            stats.setValueAt(fserve + "/" + fservetot, 0, 3);
            Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Missed 1 Serve", x, thisx, y, thisy);
            pnts.add(pnt);
            Object[] obj = {UNCPlayer1.getText(), shotsource,"Missed 1 Serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
            pointsModel.addRow(obj);
        });
        serve2.addActionListener((ActionEvent e) -> {
            sservetot++;
            unforcedErrors++;
            stats.setValueAt(sserve + "/" + sservetot, 0, 4);
            stats.setValueAt(unforcedErrors, 0, 2);
            Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Missed 2 Serve", x, thisx, y, thisy);
            pnts.add(pnt);
            Object[] obj = {UNCPlayer1.getText(), shotsource,"Missed 2 Serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
            pointsModel.addRow(obj);
        });
    }

    private void rightOBMouseClicked(java.awt.event.MouseEvent evt) {                                     
        java.awt.Point pp = evt.getPoint();
        SwingUtilities.convertPointToScreen(pp, evt.getComponent());
        thisx = pp.x;
        thisy = pp.y;
        
        javax.swing.JPopupMenu typeOfShot = new javax.swing.JPopupMenu();
        typeOfShot.add(ufe);
        typeOfShot.add(ofe);
        typeOfShot.add(serve1);
        typeOfShot.add(serve2);
        typeOfShot.show(evt.getComponent(), typeOfShot.getX(), typeOfShot.getY());
        PopupMenuListener p = new PopupMenuListener() {
            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                
            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {
                
            }
        };
        
        typeOfShot.addPopupMenuListener(p);
        ufe.addActionListener((ActionEvent e) -> {
                unforcedErrors++;
                stats.setValueAt(unforcedErrors, 0, 2);
                Vertex v = new Vertex(evt.getX(), evt.getY());
                forehand.put("Unforced error", new Edge(new Vertex(x,y), v));
                Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Unforced error", x, thisx, y, thisy);
                Object[] obj = {UNCPlayer1.getText(), shotsource,"Unforced error", x, thisx, y, thisy};
                pointsModel.addRow(obj);
        }); 
        
        ofe.addActionListener((ActionEvent e) -> {
                opFE++;
                stats.setValueAt(opFE, 0, 7);
                Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                forehand.put("Opponent forced error", new Edge(new Vertex(x,y), v));
                Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Opponent forced error", x, thisx, y, thisy);
                pnts.add(pnt);
                Object[] obj = {UNCPlayer1.getText(), shotsource,"Opponent forced error", x, thisx, y, thisy};
                pointsModel.addRow(obj);
        }); 
        serve1.addActionListener((ActionEvent e) -> {
            fservetot++;
            stats.setValueAt(fserve + "/" + fservetot, 0, 3);
            Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Missed 1 Serve", x, thisx, y, thisy);
            pnts.add(pnt);
            Object[] obj = {UNCPlayer1.getText(), shotsource,"Missed 1 Serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
            pointsModel.addRow(obj);
        });
        serve2.addActionListener((ActionEvent e) -> {
            sservetot++;
            unforcedErrors++;
            stats.setValueAt(sserve + "/" + sservetot, 0, 4);
            stats.setValueAt(unforcedErrors, 0, 2);
            Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Missed 2 Serve", x, thisx, y, thisy);
            pnts.add(pnt);
            Object[] obj = {UNCPlayer1.getText(), shotsource,"Missed 2 Serve", String.valueOf(x), String.valueOf(thisx), String.valueOf(y), String.valueOf(thisy)};
            pointsModel.addRow(obj);
        });
    }      
    
    private void topOB1MouseClicked(MouseEvent evt) {
        java.awt.Point pp = evt.getPoint();
        SwingUtilities.convertPointToScreen(pp, evt.getComponent());
        thisx = pp.x;
        thisy = pp.y;
        
        javax.swing.JPopupMenu typeOfShot = new javax.swing.JPopupMenu();
        typeOfShot.add(ufe);
        typeOfShot.add(ofe);
        typeOfShot.show(evt.getComponent(), typeOfShot.getX(), typeOfShot.getY());
        PopupMenuListener p = new PopupMenuListener() {
            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                
            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {
                
            }
        };
        
        typeOfShot.addPopupMenuListener(p);
        ufe.addActionListener((ActionEvent e) -> {
                unforcedErrors++;
                stats.setValueAt(unforcedErrors, 0, 2);
                Vertex v = new Vertex(evt.getX(), evt.getY());
                forehand.put("Unforced error", new Edge(new Vertex(x,y), v));
                Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Unforced error", x, thisx, y, thisy);
                Object[] obj = {UNCPlayer1.getText(), shotsource,"Unforced error", x, thisx, y, thisy};
                pointsModel.addRow(obj);
        }); 
        
        ofe.addActionListener((ActionEvent e) -> {
                opFE++;
                stats.setValueAt(opFE, 0, 7);
                Vertex v = new Vertex(typeOfShot.getX(), typeOfShot.getY());
                forehand.put("Opponent forced error", new Edge(new Vertex(x,y), v));
                Point pnt = new Point(UNCPlayer1.getText(), shotsource,"Opponent forced error", x, thisx, y, thisy);
                pnts.add(pnt);
                Object[] obj = {UNCPlayer1.getText(), shotsource,"Opponent forced error", x, thisx, y, thisy};
                pointsModel.addRow(obj);
        }); 
    }

    public void paint(java.awt.Graphics g, Edge e)
    {
        g.drawLine(e.getShot().getX(),e.getShot().getY(),e.getResult().getX(),e.getResult().getY());
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TennisCourt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TennisCourt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify   
    private javax.swing.JComboBox<String> playerTracker;
    private javax.swing.JTextField Opponent1;
    private javax.swing.JTextField Opponent2;
    private javax.swing.JTextField UNCPlayer1;
    private javax.swing.JTextField UNCPlayer2;
    private javax.swing.JPanel bottomLeftService;
    private javax.swing.JPanel bottomNoMans;
    private javax.swing.JPanel bottomOB;
    private javax.swing.JPanel bottomOB1;
    private javax.swing.JPanel bottomRightService;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel leftAlley;
    private javax.swing.JPanel leftOB;
    private javax.swing.JPanel leftOB1;
    private javax.swing.JComboBox<String> matchType;
    private javax.swing.JTable pointTracker;
    private javax.swing.JPanel rightAlley;
    private javax.swing.JPanel rightOB;
    private javax.swing.JButton saveData;
    private javax.swing.JTable stats;
    private javax.swing.JPanel topLeftService;
    private javax.swing.JPanel topNoMans;
    private javax.swing.JPanel topOB;
    private javax.swing.JPanel topOB1;
    private javax.swing.JPanel topRightService;
    // End of variables declaration                   

    @Override
    public void actionPerformed(ActionEvent e) {
        repaint();
    }

}
